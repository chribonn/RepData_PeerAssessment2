x <- grepl(srch[i], df$EVTYPE, ignore.case = TRUE)
df[x, "EVTYPE"] <- repl[i]
}
df$EVTYPE <- as.factor(df$EVTYPE)
return (df)
}
data2 <- x2
length(unique(data2$EVTYPE))
data2 <- cleanEVTYPE(data2)
length(unique(data2$EVTYPE))
data2 <- x2
df <- x2
df$EVTYPE <- as.factor(df$EVTYPE)
x <- grepl("ICE|SNOW", df$EVTYPE, ignore.case = TRUE)
sum(x == TRUE)
df$EVTYPE[x]
length(unique(data2$EVTYPE))
data2 <- x2
length(unique(data2$EVTYPE))
data2 <- cleanEVTYPE(data2)
length(unique(data2$EVTYPE))
unique(data2$EVTYPE)
cleanEVTYPE <- function(df) {
# unfactor the EVTYPE
df$EVTYPE <- as.character(df$EVTYPE)
srch <- c("TIDE|RAIN","AVAL","ICE|SNOW|BLIZZARD|FREEZE|FROST|HAIL|HYPOTHERMIA","DUST","FOG","HEAT","FIRE","LIGHTING")
repl <- c("WATER","AVALANCHE","WEATHER-COLD","WIND","FOG","WEATHER-HOT","FIRE","LIGHTING")
for (i in 1:length(srch)) {
x <- grepl(srch[i], df$EVTYPE, ignore.case = TRUE)
df[x, "EVTYPE"] <- repl[i]
}
df$EVTYPE <- as.factor(df$EVTYPE)
return (df)
}
data2 <- x2
data2 <- cleanEVTYPE(data2)
length(unique(data2$EVTYPE))
unique(data2$EVTYPE)
cleanEVTYPE <- function(df) {
# unfactor the EVTYPE
df$EVTYPE <- as.character(df$EVTYPE)
srch <- c("TIDE|RAIN|DROWNING|FLOOD|SURF|STORM","AVAL","ICE|SNOW|BLIZZARD|FREEZE|FROST|HAIL|HYPOTHERMIA","DUST|WIND|TYPHOON","FOG","HEAT","FIRE","LIGHTING")
repl <- c("WATER","AVALANCHE","WEATHER-COLD","WIND","FOG","WEATHER-HOT","FIRE","LIGHTING")
for (i in 1:length(srch)) {
x <- grepl(srch[i], df$EVTYPE, ignore.case = TRUE)
df[x, "EVTYPE"] <- repl[i]
}
df$EVTYPE <- as.factor(df$EVTYPE)
return (df)
}
data2 <- x2
data2 <- cleanEVTYPE(data2)
unique(data2$EVTYPE)
cleanEVTYPE <- function(df) {
# unfactor the EVTYPE
df$EVTYPE <- as.character(df$EVTYPE)
srch <- c("TIDE|RAIN|DROWNING|FLOOD|SURF|STORM|WAVE|WATER|CURRENTS|WATERSPOUT|MARINE|ICY","AVAL","ICE|SNOW|BLIZZARD|FREEZE|FROST|HAIL|HYPOTHERMIA|COLD|LOW TEMPERATURE|SLEET","DUST|WIND|TYPHOON|TORNADO|HURRICANE","FOG","HEAT|WARM|HOT","FIRE","LIGHTING")
repl <- c("WATER","AVALANCHE","WEATHER-COLD","WIND","FOG","WEATHER-HOT","FIRE","LIGHTING")
for (i in 1:length(srch)) {
x <- grepl(srch[i], df$EVTYPE, ignore.case = TRUE)
df[x, "EVTYPE"] <- repl[i]
}
df$EVTYPE <- as.factor(df$EVTYPE)
return (df)
}
data2 <- x2
data2 <- cleanEVTYPE(data2)
unique(data2$EVTYPE)
cleanEVTYPE <- function(df) {
# unfactor the EVTYPE
df$EVTYPE <- as.character(df$EVTYPE)
srch <- c("TIDE|RAIN|DROWNING|FLOOD|SURF|STORM|WAVE|WATER|CURRENTS|WATERSPOUT|MARINE|SEA","AVAL","ICE|SNOW|BLIZZARD|FREEZE.*|FROST|HAIL|HYPOTHERMIA|COLD|LOW TEMPERATURE|SLEET|ICY|HYPERTHERMIA|WINTRY|WINTER","DUST|WIND|TYPHOON|TORNADO|HURRICANE","FOG","HEAT|WARM|HOT","FIRE","LIGHTING","MUDSLIDE")
repl <- c("WATER","AVALANCHE","WEATHER-COLD","WIND","FOG","WEATHER-HOT","FIRE","LIGHTING","LANDSLIDES")
for (i in 1:length(srch)) {
x <- grepl(srch[i], df$EVTYPE, ignore.case = TRUE)
df[x, "EVTYPE"] <- repl[i]
}
df$EVTYPE <- as.factor(df$EVTYPE)
return (df)
}
data2 <- x2
data2 <- cleanEVTYPE(data2)
unique(data2$EVTYPE)
cleanEVTYPE <- function(df) {
# unfactor the EVTYPE
df$EVTYPE <- as.character(df$EVTYPE)
srch <- c("TIDE|RAIN|DROWNING|FLOOD|SURF|STORM|WAVE|WATER|CURRENTS|WATERSPOUT|MARINE|SEA|SWELL","AVAL","ICE|SNOW|BLIZZARD|FREEZE.*|FROST|HAIL|HYPOTHERMIA|COLD|LOW TEMPERATURE|SLEET|ICY|HYPERTHERMIA|WINTRY|WINTER","DUST|WIND|TYPHOON|TORNADO|HURRICANE","FOG","HEAT|WARM|HOT","FIRE","LIGHTING.*","MUDSLIDE","MIXED PRECIP")
repl <- c("WATER","AVALANCHE","WEATHER-COLD","WIND","FOG","WEATHER-HOT","FIRE","LIGHTING","LANDSLIDE","OTHER")
for (i in 1:length(srch)) {
x <- grepl(srch[i], df$EVTYPE, ignore.case = TRUE)
df[x, "EVTYPE"] <- repl[i]
}
df$EVTYPE <- as.factor(df$EVTYPE)
return (df)
}
data2 <- x2
data2 <- cleanEVTYPE(data2)
unique(data2$EVTYPE)
x <- grepl("ICE|SNOW|BLIZZARD|FREEZE.*|FROST|HAIL|HYPOTHERMIA|COLD|LOW TEMPERATURE|SLEET|ICY|HYPERTHERMIA|WINTRY|WINTER", data2$EVTYPE, ignore.case = TRUE)
data2[x]
data2[x,]
data2[x==TRUE]
data2[x==TRUE,]
data2 <- x2
view(data2)
View(data2)
x <- grepl("ICE|SNOW|BLIZZARD|FREEZE.*|FROST|HAIL|HYPOTHERMIA|COLD|LOW TEMPERATURE|SLEET|ICY|HYPERTHERMIA|WINTRY|WINTER", data2$EVTYPE, ignore.case = TRUE)
data2
data$EVTYPE <- toupper(data$EVTYPE)
data$EVTYPE <- toupper(data$EVTYPE)
data2 <- data[data$INJURIES > 0 | data$FATALITIES>0,c("BGN_DATE", "EVTYPE", "FATALITIES", "INJURIES")]
x <- data2
cleanEVTYPE <- function(df) {
# unfactor the EVTYPE
df$EVTYPE <- as.character(df$EVTYPE)
srch <- c("TIDE|RAIN|DROWNING|FLOOD|SURF|STORM|WAVE|WATER|CURRENTS|WATERSPOUT|MARINE|SEA|SWELL","AVAL","ICE|SNOW|BLIZZARD|FREEZE|FROST|HAIL|HYPOTHERMIA|COLD|LOW TEMPERATURE|SLEET|ICY|HYPERTHERMIA|WINTRY|WINTER","DUST|WIND|TYPHOON|TORNADO|HURRICANE","FOG","HEAT|WARM|HOT","FIRE","LIGHTING.*","MUDSLIDE|LANDSLIDES","MIXED PRECIP")
repl <- c("WATER","AVALANCHE","WEATHER-COLD","WIND","FOG","WEATHER-HOT","FIRE","LIGHTING","LANDSLIDE","OTHER")
for (i in 1:length(srch)) {
x <- grepl(srch[i], df$EVTYPE, ignore.case = TRUE)
df[x, "EVTYPE"] <- repl[i]
}
df$EVTYPE <- as.factor(df$EVTYPE)
return (df)
}
x2 <- data2
x <- data
data2 <- cleanEVTYPE(data2)
unique(data2$EVTYPE)
cleanEVTYPE <- function(df) {
# unfactor the EVTYPE
df$EVTYPE <- as.character(df$EVTYPE)
srch <- c("TIDE|RAIN|DROWNING|FLOOD|SURF|STORM|WAVE|WATER|CURRENTS|WATERSPOUT|MARINE|SEA|SWELL|STREAM FLD|CURRENT","AVAL","ICE|SNOW|BLIZZARD|FREEZE|FROST|HAIL|HYPOTHERMIA|COLD|LOW TEMPERATURE|SLEET|ICY|HYPERTHERMIA|WINTRY|WINTER","DUST|WIND|TYPHOON|TORNADO|HURRICANE|FUNNEL","FOG","HEAT|WARM|HOT","FIRE","LIGHTING|LIGHTNING","MUDSLIDE|LANDSLIDES","MIXED PRECIP|HIGH")
repl <- c("WATER","AVALANCHE","WEATHER-COLD","WIND","FOG","WEATHER-HOT","FIRE","LIGHTING","LANDSLIDE","OTHER")
for (i in 1:length(srch)) {
x <- grepl(srch[i], df$EVTYPE, ignore.case = TRUE)
df[x, "EVTYPE"] <- repl[i]
}
df$EVTYPE <- as.factor(df$EVTYPE)
return (df)
}
cleanEVTYPE <- function(df) {
# unfactor the EVTYPE
df$EVTYPE <- as.character(df$EVTYPE)
srch <- c("TIDE|RAIN|DROWNING|FLOOD|SURF|STORM|WAVE|WATER|CURRENTS|WATERSPOUT|MARINE|SEA|SWELL|STREAM FLD|CURRENT","AVAL","ICE|SNOW|BLIZZARD|FREEZE|FROST|HAIL|HYPOTHERMIA|COLD|LOW TEMPERATURE|SLEET|ICY|HYPERTHERMIA|WINTRY|WINTER","DUST|WIND|TYPHOON|TORNADO|HURRICANE|FUNNEL","FOG","HEAT|WARM|HOT","FIRE","LIGHTING|LIGHTNING","MUDSLIDE|LANDSLIDES","MIXED PRECIP|HIGH")
repl <- c("WATER","AVALANCHE","WEATHER-COLD","WIND","FOG","WEATHER-HOT","FIRE","LIGHTING","LANDSLIDE","OTHER")
for (i in 1:length(srch)) {
x <- grepl(srch[i], df$EVTYPE, ignore.case = TRUE)
df[x, "EVTYPE"] <- repl[i]
}
df$EVTYPE <- as.factor(df$EVTYPE)
return (df)
}
data2 <- cleanEVTYPE(data2)
unique(data2$EVTYPE)
p <- ggplot(d, aes(x=EVTYPE)) + opts(axis.text.x=theme_text(angle=90, hjust=1))
library(ggplot)
library(ggplot2)
p <- ggplot(d, aes(x=EVTYPE)) + opts(axis.text.x=theme_text(angle=90, hjust=1))
p <- ggplot(data2, aes(x=EVTYPE)) + opts(axis.text.x=theme_text(angle=90, hjust=1))
p <- ggplot(data2, aes(x=EVTYPE))
p + geom_histogram()
unique(data2$EVTYPE)
library(reshape)
install.packages("reshape")
library(reshape)
data2 <- melt(data2, id=c("EVTYPE"))
data2 <- data[data$INJURIES > 0 | data$FATALITIES>0,c("EVTYPE", "FATALITIES", "INJURIES")]
data2 <- melt(data2, id=c("EVTYPE"))
head(data2)
p <- ggplot(data2, aes(EVTYPE, fill=variable))
p + geom_bar(y=value, stat="identity")
p <- ggplot(data2, aes(x=EVTYPE, y=value,fill=variable))
max(data2$value)
p + geom_bar(stat="identity")
unique(data2$EVTYPE)
data$EVTYPE <- toupper(data$EVTYPE)
data2 <- data[data$INJURIES > 0 | data$FATALITIES>0,c("EVTYPE", "FATALITIES", "INJURIES")]
data2 <- cleanEVTYPE(data2)
data2 <- melt(data2, id=c("EVTYPE"))
p <- ggplot(data2, aes(x=EVTYPE, y=value,fill=variable))
p + geom_bar(stat="identity")
p + geom_bar(stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
names(data2) <- c("EventType","Category","Amount")
p <- ggplot(data2, aes(x=EVTYPE, y=value,fill=variable))
p <- p + geom_bar(stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p + + ggtitle("Harmful effects to population health by Event Type")
p <- ggplot(data2, aes(x=EVTYPE, y=value,fill=variable))
p <- p + geom_bar(stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p + ggtitle("Harmful effects to population health by Event Type")
p <- ggplot(data2, aes(x=EventType, y=Category,fill=Amount))
p <- p + geom_bar(stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p + ggtitle("Harmful effects to population health by Event Type")
names(data2) <- c("EventType","Category","Amount")
p <- ggplot(data2, aes(x=EventType, y=Amount,fill=Category))
p <- p + geom_bar(stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p + ggtitle("Harmful effects to population health by Event Type")
max(data2$EventType)
aggdt <- aggregate(data2, by=list(EventType), FUN=max)
aggdt <- aggregate(data2, by=list("EventType"), FUN=max)
maxs <- aggregate(Amount ~ EventType, data = data2, FUN = max)
maxs
?aggregate
maxs <- aggregate(Amount ~ EventType, data = data2, FUN = max, simplify = TRUE)
maxs
maxs <- aggregate(Amount ~ EventType, data = data2, FUN = max)
sort(maxs$Amount)
order(maxs$Amount)
order(maxs$Amount, decreasing = FALSE)
order(maxs$Amount, decreasing = TRUE)
order(maxs$Amount, decreasing = TRUE)[1]
sums <- aggregate(Amount ~ EventType, data = data2, FUN = sum)
sums
sums[order(sums$amount)]
sums[order(sums$amount),]
order(sums$amount)
sums$amount
sums <- aggregate(Amount ~ EventType, data = data2, FUN = sum)
order(sums$Amount)
sums[order(sums$Amount),]
head(data$PROPDMG,data$PROPDMGEXP)
head(data$PROPDMG)
head(data$PROPDMGEXP)
data[,"PROPDMG","PROPDMGEXP"]
data[,c("PROPDMG","PROPDMGEXP")]
data[PROPDMGEXP == 17,c("PROPDMG","PROPDMGEXP")]
data[data$PROPDMGEXP == 17,c("PROPDMG","PROPDMGEXP")]
data[data$PROPDMGEXP == 17,]
unique(data$PROPDMGEXP)
data[data$PROPDMGEXP == 5,]
data[data$PROPDMGEXP == 5,c("PROPDMG","PROPDMGEXP")]
data$PROPDMGEXP <- toupper(data$PROPDMGEXP)
data$CROPDMGEXP <- toupper(data$CROPDMGEXP)
is.na(data$PROPDMG)
sum(is.na(data$PROPDMG))
sum(is.na(data$PROPDMGEXP))
sum(is.na(data$CROPDMGEXP))
sum(is.na(data$CROPDMG))
unique(data$CROPDMGEXP))
unique(data$CROPDMGEXP)
data$CROPDMGEXP <- as.character(data$CROPDMGEXP])
data$CROPDMGEXP <- as.character(data$CROPDMGEXP)
data$CROPDMGEXP[data$CROPDATAEXP == "M"] <- 6
unique(data$CROPDMGEXP)
data$CROPDMGEXP[data$CROPDATAEXP == "M",]
data$CROPDMGEXP[,data$CROPDATAEXP == "M"]
data$CROPDMGEXP[data$CROPDATAEXP == "M",]
data$CROPDMGEXP <- as.character(data$CROPDMGEXP)
data$CROPDMGEXP[data$CROPDMGEXP == "" | data$CROPDMGEXP == "?"] <- 0
data$CROPDMGEXP[data$CROPDMGEXP == "M"] <- 6
data$CROPDMGEXP[data$CROPDMGEXP == "K"] <- 3
data$CROPDMGEXP[data$CROPDMGEXP == "B"] <- 9
unique(data$CROPDMGEXP)
unique(data$PROPDMGEXP)
data <- x
# Adjust the multiplier for the CROP Damage so that it is a number. Clear out erroneus data
data$CROPDMGEXP <- as.character(data$CROPDMGEXP)
data$CROPDMGEXP[data$CROPDMGEXP == "" | data$CROPDMGEXP == "?"] <- 0
data$CROPDMGEXP[data$CROPDMGEXP == "M"] <- 6
data$CROPDMGEXP[data$CROPDMGEXP == "K"] <- 3
data$CROPDMGEXP[data$CROPDMGEXP == "B"] <- 9
# Adjust the multiplier for the PROPERTY Damage so that it is a number. Clear out erroneus data
data$PROPDMGEXP <- as.character(data$PROPDMGEXP)
data$PROPDMGEXP[data$PROPDMGEXP == "" | data$PROPDMGEXP == "?" | data$PROPDMGEXP == "+" | data$PROPDMGEXP == "-"] <- 0
data$PROPDMGEXP[data$PROPDMGEXP == "M"] <- 6
data$PROPDMGEXP[data$PROPDMGEXP == "K"] <- 3
data$PROPDMGEXP[data$PROPDMGEXP == "B"] <- 9
data$PROPDMGEXP[data$PROPDMGEXP == "H"] <- 2
# Compute the dollar amount for the two type of damage
data$CropDmgTot <- data$CROPDM * 10 ^ data$CROPDMGEXP
data$PropDmgTot <- data$PROPDM * 10 ^ data$PROPDMGEXP
# Build the multiplier for the damage extimate
data3 <- data[data$CropDmgTot > 0 | data$PropDmgTot > 0,c("EVTYPE", "CropDmgTot", "PropDmgTot")]
unique(data$CROPDMGEXP)
data <- x
data$BGN_DATE <- strptime(paste(as.Date(data$BGN_DATE, format="%m/%d/%Y"), data$BGN_TIME), format="%Y-%m-%d %H%M")
data$BGN_TIME <- NULL
# Convert certain columns to upper case
data$EVTYPE <- toupper(data$EVTYPE)
data$PROPDMGEXP <- toupper(data$PROPDMGEXP)
data$CROPDMGEXP <- toupper(data$CROPDMGEXP)
data$CROPDMGEXP <- as.character(data$CROPDMGEXP)
data$CROPDMGEXP[data$CROPDMGEXP == "" | data$CROPDMGEXP == "?"] <- 0
data$CROPDMGEXP[data$CROPDMGEXP == "M"] <- 6
data$CROPDMGEXP[data$CROPDMGEXP == "K"] <- 3
data$CROPDMGEXP[data$CROPDMGEXP == "B"] <- 9
# Adjust the multiplier for the PROPERTY Damage so that it is a number. Clear out erroneus data
data$PROPDMGEXP <- as.character(data$PROPDMGEXP)
data$PROPDMGEXP[data$PROPDMGEXP == "" | data$PROPDMGEXP == "?" | data$PROPDMGEXP == "+" | data$PROPDMGEXP == "-"] <- 0
data$PROPDMGEXP[data$PROPDMGEXP == "M"] <- 6
data$PROPDMGEXP[data$PROPDMGEXP == "K"] <- 3
data$PROPDMGEXP[data$PROPDMGEXP == "B"] <- 9
data$PROPDMGEXP[data$PROPDMGEXP == "H"] <- 2
# Compute the dollar amount for the two type of damage
data$CropDmgTot <- data$CROPDM * 10 ^ data$CROPDMGEXP
data$PropDmgTot <- data$PROPDM * 10 ^ data$PROPDMGEXP
# Build the multiplier for the damage extimate
data3 <- data[data$CropDmgTot > 0 | data$PropDmgTot > 0,c("EVTYPE", "CropDmgTot", "PropDmgTot")]
unique(data$CROPDMGEXP)
data$CropDmgTot <- data$CROPDM * 10 ^ to.numeric(data$CROPDMGEXP)
data$CropDmgTot <- data$CROPDM * 10 ^ as.numeric(data$CROPDMGEXP)
data$CROPDM * 10 ^ as.numeric(data$CROPDMGEXP)
df <- data$CROPDM * 10 ^ as.numeric(data$CROPDMGEXP)
df
df <- data$CROPDM * 10
df
data$CROPDM
data$CropDmgTot <- data$CROPDMG * 10 ^ as.numeric(data$CROPDMGEXP)
data$CropDmgTot
summary(data$CropDmgTot)
data$PropDmgTot <- data$PROPDMG * 10 ^ as.numeric(data$PROPDMGEXP)
summary(data$PropDmgTot)
data3 <- data[data$CropDmgTot > 0 | data$PropDmgTot > 0,c("EVTYPE", "CropDmgTot", "PropDmgTot")]
cleanEVTYPE <- function(df) {
# unfactor the EVTYPE
df$EVTYPE <- as.character(df$EVTYPE)
srch <- c("TIDE|RAIN|DROWNING|FLOOD|SURF|STORM|WAVE|WATER|CURRENTS|WATERSPOUT|MARINE|SEA|SWELL|STREAM FLD|CURRENT",
"AVAL",
"ICE|SNOW|BLIZZARD|FREEZ|FROST|HAIL|HYPOTHERMIA|COLD|LOW TEMPERATURE|SLEET|ICY|HYPERTHERMIA|WINTRY|WINTER",
"DUST|WIND|TYPHOON|TORNADO|HURRICANE|FUNNEL|DRY MICROBURST",
"FOG",
"HEAT|WARM|HOT|DROUGHT",
"FIRE",
"LIGHTING|LIGHTNING",
"MUDSLIDE|LANDSLIDES",
"MIXED PRECIP|HIGH")
repl <- c("WATER",
"AVALANCHE",
"WEATHER-COLD",
"WIND",
"FOG",
"WEATHER-HOT",
"FIRE",
"LIGHTING",
"LANDSLIDE",
"OTHER")
for (i in 1:length(srch)) {
x <- grepl(srch[i], df$EVTYPE, ignore.case = TRUE)
df[x, "EVTYPE"] <- repl[i]
}
df$EVTYPE <- as.factor(df$EVTYPE)
return (df)
}
# Install and load libraries used here
for (x in c("ggplot2","reshape")) {
if (x %in% rownames(installed.packages()) == FALSE) {
install.packages(x)
}
}
library(ggplot2)
library(reshape)
zipFileNm <- "./data/StormData.csv.bz2"
dLoadFileNm <- "./data/sourceDt.RData"
load(dLoadFileNm, envir=environment())
data$BGN_DATE <- strptime(paste(as.Date(data$BGN_DATE, format="%m/%d/%Y"), data$BGN_TIME), format="%Y-%m-%d %H%M")
data$BGN_TIME <- NULL
# Convert certain columns to upper case
data$EVTYPE <- toupper(data$EVTYPE)
data$PROPDMGEXP <- toupper(data$PROPDMGEXP)
data$CROPDMGEXP <- toupper(data$CROPDMGEXP)
data2 <- data[data$INJURIES > 0 | data$FATALITIES>0,c("EVTYPE", "FATALITIES", "INJURIES")]
data2 <- cleanEVTYPE(data2)
maxs <- aggregate(Amount ~ EventType, data = data2, FUN = max)
maxr <- order(maxs$Amount, decreasing = TRUE)[1]
sums <- aggregate(Amount ~ EventType, data = data2, FUN = sum)
sums[order(with(sums))]
maxs <- aggregate(Amount ~ EventType, data = data2, FUN = max)
data2 <- melt(data2, id=c("EVTYPE"))
names(data2) <- c("EventType","Category","Amount")
p <- ggplot(data2, aes(x=EventType, y=Amount,fill=Category))
p <- p + geom_bar(stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p + ggtitle("Harmful effects to population health by Event Type")
maxs <- aggregate(Amount ~ EventType, data = data2, FUN = max)
maxr <- order(maxs$Amount, decreasing = TRUE)[1]
sums <- aggregate(Amount ~ EventType, data = data2, FUN = sum)
sums[order(with(sums))]
data2[maxr, "EventType"]
sums[order(sums$Amount),]
sums[order(sums$Amount),]
cleanEVTYPE <- function(df) {
# unfactor the EVTYPE
df$EVTYPE <- as.character(df$EVTYPE)
srch <- c("WETNESS|STREAM|PRECIPITATION|SHOWER|TIDE|RAIN|DROWNING|FLOOD|SURF|STORM|WAVE|WATER|CURRENTS|WATERSPOUT|MARINE|SEA|SWELL|STREAM FLD|CURRENT",
"AVAL",
"ICE|SNOW|BLIZZARD|FREEZ|FROST|HAIL|HYPOTHERMIA|COLD|LOW TEMPERATURE|SLEET|ICY|HYPERTHERMIA|WINTRY|WINTER",
"DUST|WIND|TYPHOON|TORNADO|HURRICANE|FUNNEL|DRY MICROBURST",
"FOG|DENSE SMOKE",
"HEAT|WARM|HOT|DROUGHT",
"FIRE",
"LIGHTING|LIGHTNING|TSTMW",
"MUD|LANDSLIDES|EROSION|ROCK SLIDE",
"MIXED PRECIP|?|APACHE COUNTY")
repl <- c("WATER",
"AVALANCHE",
"WEATHER-COLD",
"WIND",
"FOG",
"WEATHER-HOT",
"FIRE",
"LIGHTING",
"LANDSLIDE",
"OTHER")
for (i in 1:length(srch)) {
x <- grepl(srch[i], df$EVTYPE, ignore.case = TRUE)
df[x, "EVTYPE"] <- repl[i]
}
df$EVTYPE <- as.factor(df$EVTYPE)
return (df)
}
data3 <- cleanEVTYPE(data3)
unique(data3$EVTYPE)
data3 <- data[data$CropDmgTot > 0 | data$PropDmgTot > 0,c("EVTYPE", "CropDmgTot", "PropDmgTot")]
cleanEVTYPE <- function(df) {
# unfactor the EVTYPE
df$EVTYPE <- as.character(df$EVTYPE)
srch <- c("WETNESS|STREAM|PRECIPITATION|SHOWER|TIDE|RAIN|DROWNING|FLOOD|SURF|STORM|WAVE|WATER|CURRENTS|WATERSPOUT|MARINE|SEA|SWELL|STREAM FLD|CURRENT",
"AVAL",
"ICE|SNOW|BLIZZARD|FREEZ|FROST|HAIL|HYPOTHERMIA|COLD|LOW TEMPERATURE|SLEET|ICY|HYPERTHERMIA|WINTRY|WINTER",
"DUST|WIND|TYPHOON|TORNADO|HURRICANE|FUNNEL|DRY MICROBURST",
"FOG|DENSE SMOKE",
"HEAT|WARM|HOT|DROUGHT",
"FIRE",
"LIGHTING|LIGHTNING|TSTMW",
"MUD|LANDSLIDES|EROSION|ROCK SLIDE",
"MIXED PRECIP|?|APACHE COUNTY")
repl <- c("WATER",
"AVALANCHE",
"WEATHER-COLD",
"WIND",
"FOG",
"WEATHER-HOT",
"FIRE",
"LIGHTING",
"LANDSLIDE",
"OTHER")
for (i in 1:length(srch)) {
x <- grepl(srch[i], df$EVTYPE, ignore.case = TRUE)
df[x, "EVTYPE"] <- repl[i]
}
df$EVTYPE <- as.factor(df$EVTYPE)
return (df)
}
load(dLoadFileNm, envir=environment())
data$BGN_DATE <- strptime(paste(as.Date(data$BGN_DATE, format="%m/%d/%Y"), data$BGN_TIME), format="%Y-%m-%d %H%M")
data$BGN_TIME <- NULL
# Convert certain columns to upper case
data$EVTYPE <- toupper(data$EVTYPE)
data$PROPDMGEXP <- toupper(data$PROPDMGEXP)
data$CROPDMGEXP <- toupper(data$CROPDMGEXP)
data2 <- data[data$INJURIES > 0 | data$FATALITIES>0,c("EVTYPE", "FATALITIES", "INJURIES")]
data2 <- cleanEVTYPE(data2)
unique(data2$EVTYPE)
cleanEVTYPE <- function(df) {
# unfactor the EVTYPE
df$EVTYPE <- as.character(df$EVTYPE)
srch <- c("WETNESS|STREAM|PRECIPITATION|SHOWER|TIDE|RAIN|DROWNING|FLOOD|SURF|STORM|WAVE|WATER|CURRENTS|WATERSPOUT|MARINE|SEA|SWELL|STREAM FLD|CURRENT",
"AVAL",
"ICE|SNOW|BLIZZARD|FREEZ|FROST|HAIL|HYPOTHERMIA|COLD|LOW TEMPERATURE|SLEET|ICY|HYPERTHERMIA|WINTRY|WINTER",
"DUST|WIND|TYPHOON|TORNADO|HURRICANE|FUNNEL|DRY MICROBURST",
"FOG|DENSE SMOKE",
"HEAT|WARM|HOT|DROUGHT",
"FIRE",
"LIGHTING|LIGHTNING|TSTMW",
"MUD|LANDSLIDES|EROSION|ROCK SLIDE",
"MIXED PRECIP|?|APACHE COUNTY")
repl <- c("WATER",
"AVALANCHE",
"WEATHER-COLD",
"WIND",
"FOG",
"WEATHER-HOT",
"FIRE",
"LIGHTING",
"LANDSLIDE",
"OTHER")
for (i in 1:length(srch)) {
x <- grepl(srch[i], df$EVTYPE, ignore.case = TRUE)
df[x, "EVTYPE"] <- repl[i]
}
df$EVTYPE <- as.factor(df$EVTYPE)
return (df)
}
zipFileNm <- "./data/StormData.csv.bz2"
dLoadFileNm <- "./data/sourceDt.RData"
load(dLoadFileNm, envir=environment())
data$BGN_DATE <- strptime(paste(as.Date(data$BGN_DATE, format="%m/%d/%Y"), data$BGN_TIME), format="%Y-%m-%d %H%M")
data$BGN_TIME <- NULL
# Convert certain columns to upper case
data$EVTYPE <- toupper(data$EVTYPE)
data$PROPDMGEXP <- toupper(data$PROPDMGEXP)
data$CROPDMGEXP <- toupper(data$CROPDMGEXP)
data2 <- data[data$INJURIES > 0 | data$FATALITIES>0,c("EVTYPE", "FATALITIES", "INJURIES")]
data2 <- cleanEVTYPE(data2)
unique(data2$EVTYPE)
data2 <- data[data$INJURIES > 0 | data$FATALITIES>0,c("EVTYPE", "FATALITIES", "INJURIES")]
data2 <- cleanEVTYPE(data2)
unique(data2$EVTYPE)
data2 <- data[data$INJURIES > 0 | data$FATALITIES>0,c("EVTYPE", "FATALITIES", "INJURIES")]
unique(data2$EVTYPE)
x2 <- data2
data2 <- cleanEVTYPE(data2)
data2 <- x2
source('E:/Data Science - John Hopkins University/05. Reproducible Research/4. Week 4/Assignment/Data Inspection.R')
debugSource('E:/Data Science - John Hopkins University/05. Reproducible Research/4. Week 4/Assignment/Data Inspection.R')
data2 <- cleanEVTYPE(data2)
unique(df$EVTYPE)
unique(df$EVTYPE)
unique(df$EVTYPE)
repl[i]
unique(df$EVTYPE)
unique(df$EVTYPE)
unique(data2$EVTYPE)
n
